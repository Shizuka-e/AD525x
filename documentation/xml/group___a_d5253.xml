<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="group___a_d5253" kind="group">
    <compoundname>AD5253</compoundname>
    <title>and AD5254 differ based on what the maximum wiper setting is.</title>
    <innerclass refid="class_a_d525x" prot="public">AD525x</innerclass>
    <innerclass refid="class_a_d5253" prot="public">AD5253</innerclass>
    <innerclass refid="class_a_d5254" prot="public">AD5254</innerclass>
    <innergroup refid="group___instruction">registers: These are the top 3 bits of the instruction registers.</innergroup>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group___a_d5253_1gad0fc5917fcac0192d99fe4baa49600fc" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t AD525x::max_val</definition>
        <argsstring></argsstring>
        <name>max_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used only by child classes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="94" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___a_d5253_1gaee57dd358b84e7f7e38f0a80edfe312b" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t AD525x::dev_addr</definition>
        <argsstring></argsstring>
        <name>dev_addr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The full 7-bit address of the specified device. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="101" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___a_d5253_1ga87cfe7d9265a91849c7c56a1197c750b" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t AD525x::err_code</definition>
        <argsstring></argsstring>
        <name>err_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used for error detection. Access via <ref refid="group___a_d5253_1ga1a5029af432b07e2b39aaf0e380a3973" kindref="member">get_err_code()</ref> and <ref refid="group___a_d5253_1gab425c301f5d90a1fe958de21cdda831e" kindref="member">get_error_text()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="103" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___a_d5253_1ga98991d8077f70969db06fa32c13ba859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AD525x::AD525x</definition>
        <argsstring>(uint8_t AD_addr)</argsstring>
        <name>AD525x</name>
        <param>
          <type>uint8_t</type>
          <declname>AD_addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Constructor - pass (AD1&lt;&lt;1 | AD0) to AD_addr to select the chosen device address.</para><para>This is the constructor for the base <ref refid="class_a_d525x" kindref="compound">AD525x</ref> class. It is called with the address of the specified device (specified via the AD1 and AD0 pins on the device itself - high = 1, low = 0). This two-bit input parameter is used to construct the full 7-bit I2C address.</para><para>If an invalid address is specified, <computeroutput>err_code</computeroutput> is set to <computeroutput>EC_BAD_DEVICE_ADDR</computeroutput>. This can be queried via <computeroutput><ref refid="group___a_d5253_1ga1a5029af432b07e2b39aaf0e380a3973" kindref="member">get_err_code()</ref></computeroutput> and/or <computeroutput><ref refid="group___a_d5253_1gab425c301f5d90a1fe958de21cdda831e" kindref="member">get_error_text()</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">AD_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The two bit user-specified address of the device with which you are communicating. Should be (AD1&lt;&lt;1 | AD0).</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="80" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="8" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1gaafb16999f293f9df2efc299637f7a554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t AD525x::write_RDAC</definition>
        <argsstring>(uint8_t RDAC, uint8_t value)</argsstring>
        <name>write_RDAC</name>
        <param>
          <type>uint8_t</type>
          <declname>RDAC</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Write value to RDAC register specified by RDAC. RDAC registers are zero-based index.</para><para>Writes the specified value (<computeroutput>value</computeroutput>) to the RDAC register with RDAC address <computeroutput>RDAC</computeroutput>. There are four RDAC registers, addressed using 2-bits on a zero-based index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">RDAC</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of one of the 4 RDAC registers (0-3), representing the 4 potentiometers in the IC. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The wiper value to set the specified RDAC. This value must be in the span [0, <computeroutput>max_val</computeroutput>].</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 0 on no error, otherwise returns an error code and sets the <computeroutput>err_code</computeroutput> parameter (queried via <computeroutput><ref refid="group___a_d5253_1ga1a5029af432b07e2b39aaf0e380a3973" kindref="member">get_err_code()</ref></computeroutput>). I2C errors are raised indirectly via a call to <computeroutput><ref refid="group___a_d5253_1ga32e05e0af6227e2f4c8b72d4ddd9c2b6" kindref="member">write_data()</ref></computeroutput>. This function also raises the following error codes:<itemizedlist>
<listitem><para><computeroutput><computeroutput>EC_BAD_REGISTER</computeroutput></computeroutput>: Raised if the supplied RDAC register exceeds the maximum value (3).</para></listitem><listitem><para><computeroutput><computeroutput>EC_BAD_WIPER_SETTING</computeroutput></computeroutput>: Raised if the wiper setting (<computeroutput>value</computeroutput>) eceeds the maximum value (63 for <ref refid="class_a_d5253" kindref="compound">AD5253()</ref>, 255 for <ref refid="class_a_d5254" kindref="compound">AD5254()</ref>)</para></listitem></itemizedlist>
</para></simplesect>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="82" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="33" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1gae0aab4ec8edd75b15b1db17034d5a31f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t AD525x::read_RDAC</definition>
        <argsstring>(uint8_t RDAC)</argsstring>
        <name>read_RDAC</name>
        <param>
          <type>uint8_t</type>
          <declname>RDAC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Read the wiper setting from the specified RDAC register.</para><para>Reads the current wiper setting of the RDAC register specified by <computeroutput>RDAC</computeroutput>. On error, this sets error code and returns 0. Because 0 is a valid wiper setting, always check the error code via <computeroutput>get_error_code()</computeroutput> before trusting a 0 return value for this function. In addition to I2C errors raised by <computeroutput><ref refid="group___a_d5253_1gaebf63d75b7c1e16ccbb23e56eaa74293" kindref="member">read_data_byte()</ref></computeroutput>, this function also raises <computeroutput>EC_BAD_REGISTER</computeroutput> if the supplied RDAC register exceeds the maximum value (3).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">RDAC</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of one of the 4 RDAC registers (0-3), representing the 4 potentiometers in the IC.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the wiper value or 0 on error (0 is also a valid wiper value).</para></simplesect>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="83" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="67" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1ga4ae38aeedc85aa5de5a07dee2ebd0cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t AD525x::write_EEMEM</definition>
        <argsstring>(uint8_t reg, uint8_t value)</argsstring>
        <name>write_EEMEM</name>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Write to the EEMEM non-volatile memory register.</para><para>Write to the EEMEM non-volatile memory register. The first 4 registers (0, 1, 2, 3) are the RDAC storage registers. The remainder can store user data. There are 16 total registers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The register to which to write the EEMEM data. The first 4 are reserved for RDAC in that certain commands (such as <computeroutput>CMD_RESTORE_RDAC</computeroutput>) will automatically push/pull the RDAC values to/from these registers, though setting the RDAC-reserved EEMEM registers will not immediately set the RDAC registers. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the register.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 0 on no error. Raises I2C errors indirectly via a call to <computeroutput>write_data</computeroutput>. Also raises:<itemizedlist>
<listitem><para><computeroutput><computeroutput>EC_BAD_WIPER_SETTING</computeroutput></computeroutput>: Register selected is an RDAC register and value exceeds maximum allowed RDAC value.</para></listitem><listitem><para><computeroutput><computeroutput>EC_BAD_REGISTER</computeroutput></computeroutput>: An invalid register address was provided.</para></listitem></itemizedlist>
</para></simplesect>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="85" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="96" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1ga0e9267fc2a0396cff5dea88a992702d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t AD525x::read_EEMEM</definition>
        <argsstring>(uint8_t reg)</argsstring>
        <name>read_EEMEM</name>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Read EEMEM value from register.</para><para>Reads the value stored in the EEMEM value with the specified register address (<computeroutput>reg</computeroutput>). There are 16 EEMEM registers, and the first 4 are reserved for storing RDAC values, in the sense that certain commands (e.g. <computeroutput>CMD_RESTORE_RDAC</computeroutput>) push/pull the values to/from these registers.</para><para>On error, this sets the error code and returns 0. Since 0 is a valid wiper value, check <computeroutput><ref refid="group___a_d5253_1ga1a5029af432b07e2b39aaf0e380a3973" kindref="member">get_err_code()</ref></computeroutput> if this returns 0. This raises I2C errors indirectly from a call to <computeroutput><ref refid="group___a_d5253_1gaebf63d75b7c1e16ccbb23e56eaa74293" kindref="member">read_data_byte()</ref></computeroutput>, and raises <computeroutput>EC_BAD_REGISTER</computeroutput> if an invalid register is passed to <computeroutput>reg</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The EEMEM register whose value you want to query [0-15].</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the value stored in the specified register.</para></simplesect>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="86" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="132" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1ga062ad205aa6718db0c5c85d1a2e7c2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float AD525x::read_tolerance</definition>
        <argsstring>(uint8_t RDAC)</argsstring>
        <name>read_tolerance</name>
        <param>
          <type>uint8_t</type>
          <declname>RDAC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Reads the RAB tolerance, written at the factory, in percentage (signed float).</para><para>Reads the RAB tolerance programmed into the device at the factory for the specified RDAC (<computeroutput>RDAC</computeroutput>), returning the percent tolerance as a signed float. These values will vary from device to device and register to register.</para><para>This returns 0.0 on error, but since 0.0 is a valid output, in the event of a 0.0 return value, check <computeroutput><ref refid="group___a_d5253_1ga1a5029af432b07e2b39aaf0e380a3973" kindref="member">get_err_code()</ref></computeroutput> to determine if an error has occurred. This raises I2C errors indirectly via calls to <computeroutput><ref refid="group___a_d5253_1gaebf63d75b7c1e16ccbb23e56eaa74293" kindref="member">read_data_byte()</ref></computeroutput>, and raises <computeroutput>EC_BAD_REGISTER</computeroutput> if the provided <computeroutput>RDAC</computeroutput> value exceeds the maximum (3).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">RDAC</parametername>
</parameternamelist>
<parameterdescription>
<para>The RDAC register whose tolerance you would like to query.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the RAB tolerance set at the factory and stored in read-only memory on the chip, represented as a signed float as a percentage of the total device resistance.</para></simplesect>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="88" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="162" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1gaebf63d75b7c1e16ccbb23e56eaa74293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t AD525x::read_data_byte</definition>
        <argsstring>(uint8_t register_addr)</argsstring>
        <name>read_data_byte</name>
        <param>
          <type>uint8_t</type>
          <declname>register_addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Reads a single byte from the specified register. Convenience wrapper for <computeroutput><ref refid="group___a_d5253_1ga0ea67f3d590a18bcbb5936827004606e" kindref="member">read_data()</ref></computeroutput>.</para><para>This reads a single byte from the register specified at <computeroutput>register_addr</computeroutput> via a call to <computeroutput><ref refid="group___a_d5253_1ga0ea67f3d590a18bcbb5936827004606e" kindref="member">read_data()</ref></computeroutput>. In most cases, only a single byte is stored at the specified register address.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">register_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The register address from which to read a single byte.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the requested value. If there is an error, returns 0 and <computeroutput>err_code</computeroutput> (retrieved via <computeroutput><ref refid="group___a_d5253_1ga1a5029af432b07e2b39aaf0e380a3973" kindref="member">get_err_code()</ref></computeroutput>) is set to a non-zero value. This is a simple wrapper for <computeroutput><ref refid="group___a_d5253_1ga0ea67f3d590a18bcbb5936827004606e" kindref="member">read_data()</ref></computeroutput>, so it raises only the errors raised by that function.</para></simplesect>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="89" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="363" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1ga1a5029af432b07e2b39aaf0e380a3973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t AD525x::get_err_code</definition>
        <argsstring>(void)</argsstring>
        <name>get_err_code</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Retrieve the error code stored in a private variable.</para><para>Retrieves the error code stored in the private <computeroutput>err_code</computeroutput> variable. If non-zero, use <computeroutput><ref refid="group___a_d5253_1gab425c301f5d90a1fe958de21cdda831e" kindref="member">get_error_text()</ref></computeroutput> to retrieve the error string.</para><para><simplesect kind="return"><para>Returns the error code set in the current object. Non-zero value is an error.</para></simplesect>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="91" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="220" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1gab425c301f5d90a1fe958de21cdda831e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * AD525x::get_error_text</definition>
        <argsstring>(void)</argsstring>
        <name>get_error_text</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Retrieve the error string associated with the stored error code (<computeroutput>err_code</computeroutput>).</para><para><simplesect kind="return"><para>Returns the human-readable string describing the current error code.</para></simplesect>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="92" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="231" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1gad9037f843984a64d8bc8cfe6c37028df" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t AD525x::write_cmd</definition>
        <argsstring>(uint8_t cmd_register)</argsstring>
        <name>write_cmd</name>
        <param>
          <type>uint8_t</type>
          <declname>cmd_register</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Trigger a command in the command register (no data)</para><para>This triggers a command in the command register (e.g. an address which takes no data). This is a private function, called by exposed functions hard-coded with the command register addresses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_register</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the command register (e.g. <computeroutput>CMD_NOP</computeroutput>, <computeroutput>CMD_Store_RDAC</computeroutput>)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 0 on no error, otherwise returns I2C errors:<itemizedlist>
<listitem><para><computeroutput><computeroutput>EC_NO_ERR</computeroutput></computeroutput>: No error.</para></listitem><listitem><para><computeroutput><computeroutput>EC_DATA_LONG</computeroutput></computeroutput>: Data too long to fit in transmit buffer</para></listitem><listitem><para><computeroutput><computeroutput>EC_NACK_ADDR</computeroutput></computeroutput>: Received NACK on transmit of address.</para></listitem><listitem><para><computeroutput><computeroutput>EC_NACK_DATA</computeroutput></computeroutput>: Received NACK on transmit of data.</para></listitem><listitem><para><computeroutput><computeroutput>EC_I2C_OTHER</computeroutput></computeroutput>: Other I2C error.</para></listitem></itemizedlist>
</para></simplesect>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="96" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="263" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1ga32e05e0af6227e2f4c8b72d4ddd9c2b6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t AD525x::write_data</definition>
        <argsstring>(uint8_t register_addr, uint8_t data)</argsstring>
        <name>write_data</name>
        <param>
          <type>uint8_t</type>
          <declname>register_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Writes data to the specified register address.</para><para>This is a private function, called by specific-use functions such as <computeroutput><ref refid="group___a_d5253_1gaafb16999f293f9df2efc299637f7a554" kindref="member">write_RDAC()</ref></computeroutput> and <computeroutput><ref refid="group___a_d5253_1ga4ae38aeedc85aa5de5a07dee2ebd0cfc" kindref="member">write_EEMEM()</ref></computeroutput> to write data (specified by <computeroutput>data</computeroutput>) into the register specified by <computeroutput>register_addr</computeroutput> using the Wire.h library.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>register_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The register address to query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to write to the specified address.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 0 on no error, otherwise returns I2C errors:<itemizedlist>
<listitem><para><computeroutput><computeroutput>EC_NO_ERR</computeroutput></computeroutput>: No error.</para></listitem><listitem><para><computeroutput><computeroutput>EC_DATA_LONG</computeroutput></computeroutput>: Data too long to fit in transmit buffer</para></listitem><listitem><para><computeroutput><computeroutput>EC_NACK_ADDR</computeroutput></computeroutput>: Received NACK on transmit of address.</para></listitem><listitem><para><computeroutput><computeroutput>EC_NACK_DATA</computeroutput></computeroutput>: Received NACK on transmit of data.</para></listitem><listitem><para><computeroutput><computeroutput>EC_I2C_OTHER</computeroutput></computeroutput>: Other I2C error.</para></listitem></itemizedlist>
</para></simplesect>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="97" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="286" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1ga0ea67f3d590a18bcbb5936827004606e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * AD525x::read_data</definition>
        <argsstring>(uint8_t register_addr, uint8_t length)</argsstring>
        <name>read_data</name>
        <param>
          <type>uint8_t</type>
          <declname>register_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Reads data of length <computeroutput>length</computeroutput> from register <computeroutput>register_addr</computeroutput></para><para>This is a private function, called by specific-use functions such as <computeroutput><ref refid="group___a_d5253_1gae0aab4ec8edd75b15b1db17034d5a31f" kindref="member">read_RDAC()</ref></computeroutput> and <computeroutput><ref refid="group___a_d5253_1ga0e9267fc2a0396cff5dea88a992702d6" kindref="member">read_EEMEM()</ref></computeroutput> to read a data array of length <computeroutput>length</computeroutput> (in bytes) from the register specified by <computeroutput>register_addr</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>register_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the register to read from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the data stored in the register.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, returns a pointer to an array of <computeroutput>uint8_t</computeroutput> unsigned bytes retrieved from the register. The returned array has length <computeroutput>length</computeroutput>, which in most cases will be 1. On error, this function returns a <computeroutput>NULL</computeroutput> pointer and sets <computeroutput>err_code</computeroutput> (query <computeroutput><ref refid="group___a_d5253_1ga1a5029af432b07e2b39aaf0e380a3973" kindref="member">get_err_code()</ref></computeroutput> to get the value of this variable) to one of the I2C errors:<itemizedlist>
<listitem><para><computeroutput><computeroutput>EC_NO_ERR</computeroutput></computeroutput>: No error.</para></listitem><listitem><para><computeroutput><computeroutput>EC_DATA_LONG</computeroutput></computeroutput>: Data too long to fit in transmit buffer</para></listitem><listitem><para><computeroutput><computeroutput>EC_NACK_ADDR</computeroutput></computeroutput>: Received NACK on transmit of address.</para></listitem><listitem><para><computeroutput><computeroutput>EC_NACK_DATA</computeroutput></computeroutput>: Received NACK on transmit of data.</para></listitem><listitem><para><computeroutput><computeroutput>EC_I2C_OTHER</computeroutput></computeroutput>: Other I2C error.</para></listitem></itemizedlist>
</para></simplesect>
</para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="98" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.cpp" bodystart="310" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1ga4f22c1a42137b454681bbc29ef25f096" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AD5253::AD5253</definition>
        <argsstring>(uint8_t AD_addr)</argsstring>
        <name>AD5253</name>
        <param>
          <type>uint8_t</type>
          <declname>AD_addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Maximum wiper value. 63 for <ref refid="class_a_d5253" kindref="compound">AD5253</ref> </para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="109" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group___a_d5253_1ga608cb1612b3b0c7afbfc7cfc2bc9c167" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AD5254::AD5254</definition>
        <argsstring>(uint8_t AD_addr)</argsstring>
        <name>AD5254</name>
        <param>
          <type>uint8_t</type>
          <declname>AD_addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Maximum wiper value. 255 for <ref refid="class_a_d5254" kindref="compound">AD5254</ref> </para>        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="116" column="1" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="116" bodyend="118"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___a_d5253_1ga6931616734fe67bafa17a13c36f669dc" prot="public" static="no">
        <name>AD5253_max</name>
        <initializer>63</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum wiper value for <ref refid="class_a_d5253" kindref="compound">AD5253</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="17" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga8a649fdf406bebe64ee4266a3e24af8e" prot="public" static="no">
        <name>AD5254_max</name>
        <initializer>255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum wiper value for <ref refid="class_a_d5254" kindref="compound">AD5254</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="18" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga6d864e31a00add16032f27b5e593b4bb" prot="public" static="no">
        <name>CMD_NOP</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return device to idle state </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="33" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga20ef778553622deb5c0128abf6e46fee" prot="public" static="no">
        <name>CMD_Restore_RDAC</name>
        <initializer>0x88</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restore EEMEM (A1, A0) to RDAC register (A1, A0) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="34" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga2fcff1d7250c2e10a8cd6619c02dfbcb" prot="public" static="no">
        <name>CMD_Store_RDAC</name>
        <initializer>0x90</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store RDAC (A1, A0) to EEMEM register (A1, A0) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="35" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1gab126233f35504faf03e19de6c5fcb79f" prot="public" static="no">
        <name>CMD_Dec_RDAC_6dB</name>
        <initializer>0x98</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrement RDAC (A1, A0) by 6dB </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="36" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga88f0293bc101ed9d6d9d4cf4777abc7d" prot="public" static="no">
        <name>CMD_Dec_All_RDAC_6dB</name>
        <initializer>0xa0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrement all RDAC by 6dB </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="37" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1gabde63bbaa89ab07c2779d763933cf2fa" prot="public" static="no">
        <name>CMD_Dec_RDAC_step</name>
        <initializer>0xa8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrement RDAC (A1, A0) by 1 step </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="38" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga59d24b44abbdc495f1437852b1212cf4" prot="public" static="no">
        <name>CMD_Dec_All_RDAC_step</name>
        <initializer>0xb0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrement all RDAC by 1 step </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="39" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga815782cded17808bffce732ce732ff7c" prot="public" static="no">
        <name>CMD_Restore_All_RDAC</name>
        <initializer>0xb8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset: Restore all RDACs from EEMEM </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="40" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga6abdf6fb5991e7c3da6d03c27f0a8239" prot="public" static="no">
        <name>CMD_Inc_RDAC_6dB</name>
        <initializer>0xc0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increment RDAC (A1, A0) by 6dB </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="41" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga5d4a9df8ebdbea126162ca92bca0a87c" prot="public" static="no">
        <name>CMD_Inc_All_RDAC_6dB</name>
        <initializer>0xc8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increment all RDAC by 6dB </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="42" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga848541c737adef891faf5eb6cd85e4a5" prot="public" static="no">
        <name>CMD_Inc_RDAC_step</name>
        <initializer>0xd0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increment RDAC (A1, A0) by one step </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="43" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1gabd3c8b5aaa1da1b48cc490d3d2de2a58" prot="public" static="no">
        <name>CMD_Inc_All_RDAC_step</name>
        <initializer>0xd8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increment all RDACs by one step </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="44" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga3871489e6b99e263a53357f9831d84ee" prot="public" static="no">
        <name>EC_NO_ERR</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="47" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga840adc443fd7a6dfb2131e4195aed011" prot="public" static="no">
        <name>EC_NO_ERR_str</name>
        <initializer>&quot;No error.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="48" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1gad6d1474787e5ccdc24c914966731e419" prot="public" static="no">
        <name>EC_DATA_LONG</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="50" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga2665ef6018c63ea42e0857f3b70ca7fe" prot="public" static="no">
        <name>EC_DATA_LONG_str</name>
        <initializer>&quot;Data too long to fit in transmit buffer.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="51" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga76b781411a72177d30211fca065a00f9" prot="public" static="no">
        <name>EC_NACK_ADDR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="53" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga77cff2d5d08b242de05b10db10cd14f9" prot="public" static="no">
        <name>EC_NACK_ADDR_str</name>
        <initializer>&quot;Received NACK on transmit of address.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="54" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga59684a21e6ee5c91564ab526382be073" prot="public" static="no">
        <name>EC_NACK_DATA</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="56" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1gabdc8533a8b49d5de01031c92c827b4e2" prot="public" static="no">
        <name>EC_NACK_DATA_str</name>
        <initializer>&quot;Received NACK on transmit of data.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="57" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1gace7d28091813e9e36d53c8c735cd8d80" prot="public" static="no">
        <name>EC_I2C_OTHER</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="59" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1gaf86894408f873ce440ce9aced69b8c1d" prot="public" static="no">
        <name>EC_I2C_OTHER_str</name>
        <initializer>&quot;Other I2C error.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="60" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga71d0a05d023eba9814afc77e7e5d0901" prot="public" static="no">
        <name>EC_BAD_REGISTER</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="62" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1gae0eb13a35015b6fde96acc827463758c" prot="public" static="no">
        <name>EC_BAD_REGISTER_str</name>
        <initializer>&quot;Invalid register.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="63" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1gac88743669d903ef81eb0c3bcf1662182" prot="public" static="no">
        <name>EC_BAD_WIPER_SETTING</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="65" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga90b9a7f53bbc4a0563b17a8bca4556ac" prot="public" static="no">
        <name>EC_BAD_WIPER_SETTING_str</name>
        <initializer>&quot;Invalid wiper setting.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="66" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1gaf4658a15cec75bbdf12be696bc6daf5b" prot="public" static="no">
        <name>EC_BAD_READ_SIZE</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="68" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga1b465cec37e683ec1c9a2b7daee86308" prot="public" static="no">
        <name>EC_BAD_READ_SIZE_str</name>
        <initializer>&quot;Invalid number of bytes read from register.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="69" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga8b442f295e2674379ddda6935ebd0731" prot="public" static="no">
        <name>EC_BAD_DEVICE_ADDR</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="71" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1gaa7d2c139bde0b5d4d2cd8c7f349cd8ce" prot="public" static="no">
        <name>EC_BAD_DEVICE_ADDR_str</name>
        <initializer>&quot;Bad device address - device address must be in [0, 3].&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="72" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d5253_1ga72bf6d01355325120ab20e71c3af2719" prot="public" static="no">
        <name>EC_UNKNOWN_ERR_str</name>
        <initializer>&quot;Unknown error.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" line="74" column="9" bodyfile="C:/Users/Paul/Documents/Programming/Arduino/AD525x/AD525x.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
